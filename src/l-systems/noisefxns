import {vec2, vec3, vec4, quat, mat4} from 'gl-matrix';

class NoiseFxns {
  turtlestack: Array<Turtle>;
  expmap: Map<string, ExpansionRule>;
  drawmap: Map<string, DrawingRule>;
  alphabet: Array<string>;
  axiom: string;
  newaxiom: string;
  public mat: mat4;
  public matb: mat4;
  public transfvecs: Array<vec4>;
  public btransfvecs: Array<vec4>;
  public colors: Array<vec4>;
  public bcolors: Array<vec4>;
  iters: number;

  constructor(input: string, alphabet: Array<string>, iters: number) {
    
    this.axiom = input;
    this.alphabet = alphabet;
    this.expmap = new Map();
    this.drawmap = new Map();
    this.turtlestack = new Array();
    this.mat = mat4.create();
    this.matb = mat4.create();
    this.transfvecs = new Array();
    this.btransfvecs = new Array();
    this.colors = new Array();
    this.bcolors = new Array();
    this.iters = iters;
    this.fillExpMap();
    this.fillDrawMap();
    this.lsysParse(iters);
    this.lsysExecute();
  }

  float random1( vec3 p , vec3 seed) {
  return fract(sin(dot(p + seed, vec3(987.654, 123.456, 531.975))) * 85734.3545);
}

vec2 random2( vec2 p , vec2 seed) {
  return fract(sin(vec2(dot(p + seed, vec2(311.7, 127.1)), dot(p + seed, vec2(269.5, 183.3)))) * 85734.3545);
}

//Smoothstep (Adam's code)
vec2 mySmoothStep(vec2 a, vec2 b, float t) {
    t = smoothstep(0.0, 1.0, t);
    return mix(a, b, t);
}

//2d Noise (Adam's code)
vec2 interpNoise2D(vec2 uv) {
    vec2 uvFract = fract(uv);
    vec2 ll = random2(floor(uv), vec2(10.0)); //need to input seeds
    vec2 lr = random2(floor(uv) + vec2(1,0), vec2(10.0));
    vec2 ul = random2(floor(uv) + vec2(0,1), vec2(10.0));
    vec2 ur = random2(floor(uv) + vec2(1,1), vec2(10.0));

    vec2 lerpXL = mySmoothStep(ll, lr, uvFract.x);
    vec2 lerpXU = mySmoothStep(ul, ur, uvFract.x);

    return mySmoothStep(lerpXL, lerpXU, uvFract.y);
}

//FBM (Adam's base code)
vec2 fbm(vec2 uv) {
    float amp = 20.0;
    float freq = 1.0;
    vec2 sum = vec2(0.0);
    float maxSum = 0.0;
    int octaves = 10; //can modify
    for(int i = 0; i < octaves; i++) {
        sum += interpNoise2D(uv * freq) * amp;
        maxSum += amp;
        amp *= 0.5;
        freq *= 2.0;
    }
    return sum / maxSum;
}

//Worley Noise (Adam's code)
float WorleyNoise(vec2 uv) {
    // Tile the space
    vec2 uvInt = floor(uv);
    vec2 uvFract = fract(uv);

    float minDist = 1.0; // Minimum distance initialized to max.

    // Search all neighboring cells and this cell for their point
    for(int y = -1; y <= 1; y++) {
        for(int x = -1; x <= 1; x++) {
            vec2 neighbor = vec2(float(x), float(y));

            // Random point inside current neighboring cell
            vec2 point = random2(uvInt + neighbor, vec2(10.0));

            // Compute the distance b/t the point and the fragment
            // Store the min dist thus far
            vec2 diff = neighbor + point - uvFract;
            float dist = length(diff);
            minDist = min(minDist, dist);
        }
    }
    return minDist;
}

  lsysParse(iters: number) {
      this.newaxiom = "";
      for (var i = 0; i < iters; i++) {
        for (let letter of this.axiom) {
            //find expansion string for letter
            let newstr = this.expmap.get(letter).getExpansion();
            //replace letter with new expansion
            this.newaxiom += newstr;
        }
        if (i != iters-1) {
            this.axiom = this.newaxiom;
            this.newaxiom = "";
        }
      }
  }

  lsysExecute() {
      let recurDepth = 0;
      let turt = new Turtle(vec2.fromValues(0, 0), 
                            vec2.fromValues(0, 0), recurDepth);
      let currentTurt = turt;
      let arrLength = 0;
      for (let letter of this.newaxiom) {
          if (letter == "[") {
              recurDepth++;
              // clone turtle
              let new_pos = vec2.create();
              vec2.copy(new_pos, currentTurt.position);
              let new_ori = vec2.create();
              vec2.copy(new_ori, currentTurt.orientation);
              let copyTurt = new Turtle(new_pos, new_ori, recurDepth);

              // push clone onto stack
              arrLength = this.pushTurtle(copyTurt);
          }
          else if (letter == "]") {
              // update working turtle to one about to pop
              // pop turtle off stack
              currentTurt = this.popTurtle();
              arrLength--;
              recurDepth--;
          }
          else if (letter != "F") {
              // don't draw but update turtle
              let draw = this.drawmap.get(letter);
              draw.depth = recurDepth;
              var random0 = Math.random();
              var random1 = Math.random();
              random0 *= 100.0;
              random1 *= 100.0;
              draw.getDrawOp(random0, random1);
              currentTurt.addTranslation(draw.translation);
              currentTurt.updateOrientation(draw.rotation);
              currentTurt.setDepth(recurDepth);
              draw.reset();
          }
          else {
              let draw = this.drawmap.get(letter);
              
              draw.depth = recurDepth;
              var random0 = Math.random();
              var random1 = Math.random();
              random0 *= 100.0;
              random1 *= 100.0;
              draw.getDrawOp(random0, random1);
              let previousPos = vec2.create();
              previousPos = vec2.copy(previousPos, currentTurt.position);
              // apply drawing rule transformations to turtle
              // also calls the drawing function
              currentTurt.addTranslation(draw.translation);
              currentTurt.updateOrientation(draw.rotation);
              currentTurt.setDepth(recurDepth);

              let posSize = vec3.create();
              for (let l = 0; l < 3; l++) {
                  posSize[l] = currentTurt.position[l] - previousPos[l];
              }
              let scaleAmt = vec3.length(posSize);
              let scaleTurt = vec3.create();
              let scaleBud = vec3.create();
              var randBud = Math.random();
              for (let m = 0; m < 3; m++) {
                  scaleTurt[m] = (draw.scale[m] * 1.8);
                  scaleBud[m] = scaleAmt / (draw.scale_num * 3.0);
              }

              //this.setUpTransfMat(currentTurt.orientation, previousPos, scaleTurt);
              //this.setUpBTransfMat(currentTurt.orientation, previousPos, scaleBud);

              // set up the transformation vec4s
              for (var i = 0; i < 4; i++) {
                this.transfvecs.push(vec4.fromValues(this.mat[i+0],
                                                     this.mat[i+4],
                                                     this.mat[i+8],
                                                     this.mat[i+12]));
              }

              if (randBud < 0.3 && recurDepth >= 3) {
                  for (var j = 0; j < 4; j++) {
                      this.btransfvecs.push(vec4.fromValues(this.matb[j+0],
                                                            this.matb[j+4],
                                                            this.matb[j+8],
                                                            this.matb[j+12]));
                  }
                  this.bcolors.push(vec4.fromValues(1.0,
                    (52.0/255.0),
                    (85.0/255.0),
                    1.0));
              }  

              this.colors.push(vec4.fromValues((157.0/255.0),
                                               (202.0/255.0),
                                               (114.0/255.0),
                                               1.0));
              draw.reset();
          }
      }
  }

  fillExpMap() {
    for (var i = 0; i < this.alphabet.length; i++) {
        let letter = this.alphabet[i];
        let exprule = new ExpansionRule(letter);
        this.expmap.set(letter, exprule);
    }
  }

  fillDrawMap() {
    for (var i = 0; i < this.alphabet.length; i++) {
        let letter = this.alphabet[i];
        let drawrule = new DrawingRule(letter, this.iters);
        this.drawmap.set(letter, drawrule);
    }
  }

  pushTurtle(turt: Turtle) {
      // push turt to stack and return new length
      return this.turtlestack.push(turt);
  }

  popTurtle() {
      // pop stack and return popped turtle
      return this.turtlestack.pop();
  }

  setUpTransfMat(rot: quat, trans: vec3, scale: vec3) {
    let t = mat4.create();
    mat4.fromTranslation(t, trans);
    let r = mat4.create();
    mat4.fromQuat(r, rot);
    let s = mat4.create();
    mat4.fromScaling(s, scale);
    mat4.multiply(this.mat,t,r);
    mat4.multiply(this.mat,this.mat,s);
  }

  setUpBTransfMat(rot: quat, trans: vec3, scale: vec3) {
    let t = mat4.create();
    mat4.fromTranslation(t, trans);
    let r = mat4.create();
    mat4.fromQuat(r, rot);
    let s = mat4.create();
    mat4.fromScaling(s, scale);
    mat4.multiply(this.matb,t,r);
    mat4.multiply(this.matb,this.matb,s);
  }
};

export default LSystem;
